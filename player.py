from MainClasss import *from pygame import Rectfrom math import sin, cos, piSPEED = 1class Player(Person, Sprite):    def __init__(self, name, coord, way_to_image, way_name, armor=None):        Sprite.__init__(self)        self.f = True        super().__init__('sprite/person_sprites/forward/Player/Player_forward_1.bmp', coord, 200, 200, 100, 100,                         name, way_to_image, way_name, armor)        # sites moving lists        # downloading sprites        self.add_type('MainHero')        # rect and move        self.rect = Rect((3870, 3980, 20, 5))        self.coord = self.rect.x, self.rect.y        self.speed_boost = False        self.in_hand_index = 0        # draw and animation        self.inventory = Inventory((10, 5))        self.collision_x_site = 0        self.die_f = False        self.collision_y_site = 0        self.revers_frame = False        self.frame = 0        self.count_next_frame = 0    def get_in_hand(self):        return self.inventory.get_items(self.in_hand_index, 0)[0]    def update(self, left, right, up, down, platforms, shift):        if self.heal_point <= 0:            self.die_f = True        if not self.die_f:            self.update_timer()            if shift and self.food > 0:                speed = SPEED * 3                self.speed_boost = True            else:                speed = SPEED                self.speed_boost = False            if left:                self.x_vel = -speed            if right:                self.x_vel = speed            if not (left or right):                self.x_vel = 0            if up:                self.y_vel = -speed            if down:                self.y_vel = speed            if not (up or down):                self.y_vel = 0            self.eat += abs(self.x_vel)            self.eat += abs(self.y_vel)            if self.eat >= 1000:                self.eat = 0                self.hunger(1)            self.rect.x += self.x_vel            # проверяем что ни скем не столкнулись            self.collide(self.x_vel, 0, platforms)            # движемся по игрику            self.rect.y += self.y_vel            # проверяем что ни скем не столкнулись            self.collide(0, self.y_vel, platforms)            if self.x_vel != 0 or self.y_vel != 0:                self.ticks = 0            # отрисовываем анимацию        else:            if self.f:                self.f = False                self.rect.x += 5        self.draw()        if self.get_in_hand() is not None and self.get_in_hand().is_type('Weapon'):            if not up:                self.get_in_hand().set_layer(self.layer + 1)            else:                self.get_in_hand().set_layer(self.layer - 1)    def generate_random_pos(self):        # center, (center[0] - r * cos(angle + 4.19), center[1] + r * sin(angle + 4.19)),        # (center[0] - r * cos(angle + step + 4.19), center[1] + r * sin(angle + step + 4.19))))        angle = round(random.choice(range(-314, 315)), 2) / 100        # print(cos(angle), sin(angle))        # print([int(self.coord[0] + 90 * cos(angle)), int(self.coord[1] + 90 * sin(angle))], self.coord)        return [int(self.coord[0] + 90 * cos(angle)), int(self.coord[1] + 90 * sin(angle))]    def get_coord(self):        return self.rect.x, self.rect.y - 25    def get_rect(self):        return Rect(self.rect.x, self.rect.y - 25, 20, 30)    def next_frame(self):        self.count_next_frame += 1        if (self.count_next_frame > 4 and not self.speed_boost) or (self.count_next_frame > 2 and self.speed_boost):            self.count_next_frame = 0            self.frame += 1        if self.frame == len(self.frames_forward) - 1:            self.frame = 0